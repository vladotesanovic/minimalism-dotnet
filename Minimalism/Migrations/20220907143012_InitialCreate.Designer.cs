// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Minimalism.Database;

#nullable disable

namespace Minimalism.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220907143012_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0-preview.7.22376.2");

            modelBuilder.Entity("Minimalism.Domain.Entities.Parking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Maximum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("Minimalism.Domain.Entities.Spot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Available")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ParkingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.ToTable("Spots", (string)null);
                });

            modelBuilder.Entity("Minimalism.Domain.Entities.Spot", b =>
                {
                    b.HasOne("Minimalism.Domain.Entities.Parking", null)
                        .WithMany("Spots")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Minimalism.Domain.Objects.Electrification", "Electrified", b1 =>
                        {
                            b1.Property<long>("SpotId")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("LockingMechanism")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("PowerRating")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SpotId");

                            b1.ToTable("Spots");

                            b1.WithOwner()
                                .HasForeignKey("SpotId");
                        });

                    b.Navigation("Electrified")
                        .IsRequired();
                });

            modelBuilder.Entity("Minimalism.Domain.Entities.Parking", b =>
                {
                    b.Navigation("Spots");
                });
#pragma warning restore 612, 618
        }
    }
}
